
import { supabase } from '@/integrations/supabase/client';
import type { Retornado } from '@/types';

export interface ImportResult {
  success: boolean;
  message: string;
  processedCount?: number;
  errors?: string[];
}

export async function processImportData(data: any[]): Promise<ImportResult> {
  if (!data || data.length === 0) {
    return {
      success: false,
      message: 'Nenhum dado para processar'
    };
  }

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return {
      success: false,
      message: 'Usuário não autenticado'
    };
  }

  const errors: string[] = [];
  const processedItems: Retornado[] = [];

  // Process each row
  for (const [index, row] of data.entries()) {
    try {
      // Validate required fields
      if (!row.id_cliente || !row.id_modelo || !row.peso || !row.filial) {
        errors.push(`Linha ${index + 1}: Campos obrigatórios ausentes`);
        continue;
      }

      // Convert and validate data
      const retornado: Omit<Retornado, 'id' | 'data_registro' | 'user_id'> = {
        id_cliente: Number(row.id_cliente),
        id_modelo: Number(row.id_modelo),
        peso: Number(row.peso),
        destino_final: String(row.destino_final || ''),
        filial: String(row.filial),
        valor_recuperado: row.valor_recuperado ? Number(row.valor_recuperado) : null
      };

      // Validate numeric fields
      if (isNaN(retornado.id_cliente) || isNaN(retornado.id_modelo) || isNaN(retornado.peso)) {
        errors.push(`Linha ${index + 1}: Valores numéricos inválidos`);
        continue;
      }

      processedItems.push({
        ...retornado,
        id: 0, // Will be generated by database
        data_registro: new Date().toISOString(),
        user_id: user.id
      });

    } catch (error) {
      errors.push(`Linha ${index + 1}: Erro no processamento - ${String(error)}`);
    }
  }

  if (processedItems.length === 0) {
    return {
      success: false,
      message: 'Nenhum item válido para importar',
      errors
    };
  }

  // Save to database
  try {
    const insertData = processedItems.map(item => ({
      id_cliente: item.id_cliente,
      id_modelo: item.id_modelo,
      peso: item.peso,
      destino_final: item.destino_final,
      filial: item.filial,
      valor_recuperado: item.valor_recuperado,
      data_registro: item.data_registro,
      user_id: item.user_id
    }));

    const { error } = await supabase
      .from('retornados')
      .insert(insertData);

    if (error) {
      return {
        success: false,
        message: `Erro ao salvar no banco de dados: ${error.message}`,
        errors
      };
    }

    return {
      success: true,
      message: `${processedItems.length} itens importados com sucesso`,
      processedCount: processedItems.length,
      errors: errors.length > 0 ? errors : undefined
    };

  } catch (error) {
    return {
      success: false,
      message: `Erro inesperado: ${String(error)}`,
      errors
    };
  }
}
